{
	"version": 4.0,
	"atDirectives": [
		{
			"name": "@import",
			"description": "Use the `@import` directive to inline import CSS files.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#import-directive"
				}
			]
		},
		{
			"name": "@theme",
			"description": "Use the `@theme` directive to define your project's custom design tokens, like fonts, colors, and breakpoints.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#theme-directive"
				}
			]
		},
		{
			"name": "@source",
			"description": "Use the `@source` directive to explicitly specify source files that aren't picked up by Tailwind's automatic content detection.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#source-directive"
				}
			]
		},
		{
			"name": "@utility",
			"description": "use the `@utility` directive to add cutom utilities to your project that work with variants like `hover`, `focus`, and `lg`.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#utility-directive"
				}
			]
		},
		{
			"name": "@variant",
			"description": "Use a `@variant` directive to apply a Tailwind variant to styles in ypur CSS. If you need to apply multiple variants at the same time, use nesting.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#variant-directive"
				}
			]
		},
		{
			"name": "@custom-variant",
			"description": "Use the `@custom-variant` directive to add custom variant in your project. This lets you write utilities like `pointer-coarse:size-48` and `theme-midnight:bg-slate-900`.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#custom-variant-directive"
				}
			]
		},
		{
			"name": "@apply",
			"description": "Use the `@apply` directive to inline any existing utility classes into your own custom CSS. This is useful when you need to write custom CSS (like to override the styles in a third-party library) but still want to work with your desing tokens and use the same syntax you're used to using in your HTML.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#apply-directive"
				}
			]
		},
		{
			"name": "@reference",
			"description": "If you want to use `@apply` or `@variant` in the `<style>` block of Vue or Svelte component, or within  CSS modules, you will need import theme variables, custom utilities, and custom variants to make those values available in that context. To do this without duplicating any CSS in your output, use the `@reference` directive to import your main stylesheet for reference without actually including the styles.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#reference-directive"
				}
			]
		},
		{
			"name": "@config",
			"description": "Use the `@config` directive to load a legacy JavaScript-based configuration file.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#config-directive"
				}
			]
		},
		{
			"name": "@plugin",
			"description": "Use the `@plugin` directive to load a JavaScript-based plugin. the `@plugin` directive accepts either a package nameor local path.",
			"references": [
				{
					"name": "Tailwind Documentation",
					"url": "https://tailwindcss.com/docs/funcitons-and-directives#plugin-directive"
				}
			]
		}
	]
}
